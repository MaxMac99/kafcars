use std::fmt::{Display, Formatter};

#[derive(Debug, strum_macros::Display, PartialEq, Eq, PartialOrd, Ord, Hash, Clone, Copy)]
#[cfg_attr(test, derive(proptest_derive::Arbitrary))]
pub enum ApiKey {
    Produce,
    Fetch,
    ListOffsets,
    Metadata,
    LeaderAndlsr,
    StopReplica,
    UpdateMetadata,
    ControlledShutdown,
    OffsetCommit,
    OffsetFetch,
    FindCoordinator,
    JoinGroup,
    Heartbeat,
    LeaveGroup,
    SyncGroup,
    DescribeGroups,
    ListGroups,
    SaslHandshake,
    ApiVersions,
    CreateTopics,
    DeleteTopics,
    DeleteRecords,
    InitProducerId,
    OffsetForLeaderEpoch,
    AddPartitionsToTxn,
    AddOffsetsToTxn,
    EndTxn,
    WriteTxnMarkers,
    TxnOffsetCommit,
    DescribeAcls,
    CreateAcls,
    DeleteAcls,
    DescribeConfigs,
    AlterConfigs,
    AlterReplicaLogDirs,
    DescribeLogDirs,
    SaslAuthenticate,
    CreatePartitions,
    CreateDelegationToken,
    RenewDelegationToken,
    ExpireDelegationToken,
    DescribeDelegationToken,
    DeleteGroups,
    ElectLeaders,
    IncrementalAlterConfigs,
    AlterPartitionReassignments,
    ListPartitionReassignments,
    OffsetDelete,
    DescribeClientQuotas,
    AlterClientQuotas,
    DescribeUserScramCredentials,
    AlterUserScramCredentials,
    DescribeQuorum,
    AlterPartition,
    UpdateFeatures,
    Envelope,
    DescribeCluster,
    DescribeProducers,
    UnregisterBroker,
    DescribeTransactions,
    ListTransactions,
    AllocateProducerIds,
    ConsumerGroupHeartbeat,
    ConsumerGroupDescribe,
    GetTelemetrySubscriptions,
    PushTelemetry,
    ListClientMetricsResources,
    DescribeTopicPartitions,
    Unknown(i16),
}

impl Into<i16> for ApiKey {
    fn into(self) -> i16 {
        match self {
            ApiKey::Produce => 0,
            ApiKey::Fetch => 1,
            ApiKey::ListOffsets => 2,
            ApiKey::Metadata => 3,
            ApiKey::LeaderAndlsr => 4,
            ApiKey::StopReplica => 5,
            ApiKey::UpdateMetadata => 6,
            ApiKey::ControlledShutdown => 7,
            ApiKey::OffsetCommit => 8,
            ApiKey::OffsetFetch => 9,
            ApiKey::FindCoordinator => 10,
            ApiKey::JoinGroup => 11,
            ApiKey::Heartbeat => 12,
            ApiKey::LeaveGroup => 13,
            ApiKey::SyncGroup => 14,
            ApiKey::DescribeGroups => 15,
            ApiKey::ListGroups => 16,
            ApiKey::SaslHandshake => 17,
            ApiKey::ApiVersions => 18,
            ApiKey::CreateTopics => 19,
            ApiKey::DeleteTopics => 20,
            ApiKey::DeleteRecords => 21,
            ApiKey::InitProducerId => 22,
            ApiKey::OffsetForLeaderEpoch => 23,
            ApiKey::AddPartitionsToTxn => 24,
            ApiKey::AddOffsetsToTxn => 25,
            ApiKey::EndTxn => 26,
            ApiKey::WriteTxnMarkers => 27,
            ApiKey::TxnOffsetCommit => 28,
            ApiKey::DescribeAcls => 29,
            ApiKey::CreateAcls => 30,
            ApiKey::DeleteAcls => 31,
            ApiKey::DescribeConfigs => 32,
            ApiKey::AlterConfigs => 33,
            ApiKey::AlterReplicaLogDirs => 34,
            ApiKey::DescribeLogDirs => 35,
            ApiKey::SaslAuthenticate => 36,
            ApiKey::CreatePartitions => 37,
            ApiKey::CreateDelegationToken => 38,
            ApiKey::RenewDelegationToken => 39,
            ApiKey::ExpireDelegationToken => 40,
            ApiKey::DescribeDelegationToken => 41,
            ApiKey::DeleteGroups => 42,
            ApiKey::ElectLeaders => 43,
            ApiKey::IncrementalAlterConfigs => 44,
            ApiKey::AlterPartitionReassignments => 45,
            ApiKey::ListPartitionReassignments => 46,
            ApiKey::OffsetDelete => 47,
            ApiKey::DescribeClientQuotas => 48,
            ApiKey::AlterClientQuotas => 49,
            ApiKey::DescribeUserScramCredentials => 50,
            ApiKey::AlterUserScramCredentials => 51,
            ApiKey::DescribeQuorum => 55,
            ApiKey::AlterPartition => 56,
            ApiKey::UpdateFeatures => 57,
            ApiKey::Envelope => 58,
            ApiKey::DescribeCluster => 60,
            ApiKey::DescribeProducers => 61,
            ApiKey::UnregisterBroker => 64,
            ApiKey::DescribeTransactions => 65,
            ApiKey::ListTransactions => 66,
            ApiKey::AllocateProducerIds => 67,
            ApiKey::ConsumerGroupHeartbeat => 68,
            ApiKey::ConsumerGroupDescribe => 69,
            ApiKey::GetTelemetrySubscriptions => 71,
            ApiKey::PushTelemetry => 72,
            ApiKey::ListClientMetricsResources => 74,
            ApiKey::DescribeTopicPartitions => 75,
            ApiKey::Unknown(val) => val,
        }
    }
}

impl From<i16> for ApiKey {
    fn from(value: i16) -> Self {
        match value {
            0 => ApiKey::Produce,
            1 => ApiKey::Fetch,
            2 => ApiKey::ListOffsets,
            3 => ApiKey::Metadata,
            4 => ApiKey::LeaderAndlsr,
            5 => ApiKey::StopReplica,
            6 => ApiKey::UpdateMetadata,
            7 => ApiKey::ControlledShutdown,
            8 => ApiKey::OffsetCommit,
            9 => ApiKey::OffsetFetch,
            10 => ApiKey::FindCoordinator,
            11 => ApiKey::JoinGroup,
            12 => ApiKey::Heartbeat,
            13 => ApiKey::LeaveGroup,
            14 => ApiKey::SyncGroup,
            15 => ApiKey::DescribeGroups,
            16 => ApiKey::ListGroups,
            17 => ApiKey::SaslHandshake,
            18 => ApiKey::ApiVersions,
            19 => ApiKey::CreateTopics,
            20 => ApiKey::DeleteTopics,
            21 => ApiKey::DeleteRecords,
            22 => ApiKey::InitProducerId,
            23 => ApiKey::OffsetForLeaderEpoch,
            24 => ApiKey::AddPartitionsToTxn,
            25 => ApiKey::AddOffsetsToTxn,
            26 => ApiKey::EndTxn,
            27 => ApiKey::WriteTxnMarkers,
            28 => ApiKey::TxnOffsetCommit,
            29 => ApiKey::DescribeAcls,
            30 => ApiKey::CreateAcls,
            31 => ApiKey::DeleteAcls,
            32 => ApiKey::DescribeConfigs,
            33 => ApiKey::AlterConfigs,
            34 => ApiKey::AlterReplicaLogDirs,
            35 => ApiKey::DescribeLogDirs,
            36 => ApiKey::SaslAuthenticate,
            37 => ApiKey::CreatePartitions,
            38 => ApiKey::CreateDelegationToken,
            39 => ApiKey::RenewDelegationToken,
            40 => ApiKey::ExpireDelegationToken,
            41 => ApiKey::DescribeDelegationToken,
            42 => ApiKey::DeleteGroups,
            43 => ApiKey::ElectLeaders,
            44 => ApiKey::IncrementalAlterConfigs,
            45 => ApiKey::AlterPartitionReassignments,
            46 => ApiKey::ListPartitionReassignments,
            47 => ApiKey::OffsetDelete,
            48 => ApiKey::DescribeClientQuotas,
            49 => ApiKey::AlterClientQuotas,
            50 => ApiKey::DescribeUserScramCredentials,
            51 => ApiKey::AlterUserScramCredentials,
            55 => ApiKey::DescribeQuorum,
            56 => ApiKey::AlterPartition,
            57 => ApiKey::UpdateFeatures,
            58 => ApiKey::Envelope,
            60 => ApiKey::DescribeCluster,
            61 => ApiKey::DescribeProducers,
            64 => ApiKey::UnregisterBroker,
            65 => ApiKey::DescribeTransactions,
            66 => ApiKey::ListTransactions,
            67 => ApiKey::AllocateProducerIds,
            68 => ApiKey::ConsumerGroupHeartbeat,
            69 => ApiKey::ConsumerGroupDescribe,
            71 => ApiKey::GetTelemetrySubscriptions,
            72 => ApiKey::PushTelemetry,
            74 => ApiKey::ListClientMetricsResources,
            75 => ApiKey::DescribeTopicPartitions,
            _ => ApiKey::Unknown(value),
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use proptest::prelude::*;

    proptest! {
        #[test]
        fn test_i16(key: i16) {
            let api_key = ApiKey::from(key);
            let key2: i16 = api_key.into();
            assert_eq!(key, key2);
        }

        #[test]
        fn test_api_key(api_key: ApiKey) {
            let api_key = match api_key {
                ApiKey::Unknown(val) => ApiKey::from(val),
                _ => api_key
            };

            let key: i16 = api_key.into();
            let api_key2 = ApiKey::from(key);
            assert_eq!(api_key, api_key2);
        }
    }
}
